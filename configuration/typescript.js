import tseslint from "typescript-eslint";

const deprecatedTypescriptEslintRules = {
  "@typescript-eslint/block-spacing": 0,
  "@typescript-eslint/brace-style": 0,
  "@typescript-eslint/comma-dangle": 0,
  "@typescript-eslint/comma-spacing": 0,
  "@typescript-eslint/func-call-spacing": 0,
  "@typescript-eslint/indent": 0,
  "@typescript-eslint/key-spacing": 0,
  "@typescript-eslint/keyword-spacing": 0,
  "@typescript-eslint/lines-around-comment": 0,
  "@typescript-eslint/lines-between-class-members": 0,
  "@typescript-eslint/member-delimiter-style": 0,
  "@typescript-eslint/no-extra-parens": 0,
  "@typescript-eslint/no-extra-semi": 0,
  "@typescript-eslint/padding-line-between-statements": 0,
  "@typescript-eslint/quotes": 0,
  "@typescript-eslint/semi": 0,
  "@typescript-eslint/space-before-blocks": 0,
  "@typescript-eslint/space-before-function-paren": 0,
  "@typescript-eslint/space-infix-ops": 0,
  "@typescript-eslint/type-annotation-spacing": 0,
};

/** @type {import("eslint").Linter.FlatConfig} */
const typescriptEslintConfig = {
  plugins: {
    "@typescript-eslint": tseslint.plugin,
  },
  languageOptions: {
    parser: tseslint.parser,
    parserOptions: {
      project: true,
    },
  },
  rules: {
    ...tseslint.configs.eslintRecommended.rules,
    "@typescript-eslint/adjacent-overload-signatures": 2,
    "@typescript-eslint/array-type": [2, { default: "generic" }],
    "@typescript-eslint/await-thenable": 2,
    "@typescript-eslint/ban-ts-comment": [
      2,
      {
        "ts-check": true,
        "ts-expect-error": "allow-with-description",
        "ts-ignore": false,
        "ts-nocheck": false,
      },
    ],
    "@typescript-eslint/ban-tslint-comment": 0,
    "@typescript-eslint/ban-types": 2,
    "@typescript-eslint/class-literal-property-style": 0,
    "@typescript-eslint/consistent-generic-constructors": 2,
    "@typescript-eslint/consistent-indexed-object-style": [2, "record"],
    "@typescript-eslint/consistent-type-assertions": [
      2,
      {
        assertionStyle: "as",
        objectLiteralTypeAssertions: "allow-as-parameter",
      },
    ],
    "@typescript-eslint/consistent-type-definitions": [2, "interface"],
    "@typescript-eslint/consistent-type-exports": 2,
    "@typescript-eslint/consistent-type-imports": [
      2,
      {
        prefer: "type-imports",
        disallowTypeAnnotations: true,
        fixStyle: "separate-type-imports",
      },
    ],
    "@typescript-eslint/explicit-function-return-type": 0,
    "@typescript-eslint/explicit-member-accessibility": 0,
    "@typescript-eslint/explicit-module-boundary-types": 1,
    "@typescript-eslint/default-param-last": 2,
    "@typescript-eslint/dot-notation": 2,
    "@typescript-eslint/init-declarations": [2, "always"],
    "@typescript-eslint/member-delimiter-style": 2,
    "@typescript-eslint/member-ordering": 0,
    "@typescript-eslint/method-signature-style": [2, "property"],
    "@typescript-eslint/naming-convention": [
      2,
      {
        selector: "variableLike",
        format: ["camelCase", "PascalCase"],
        leadingUnderscore: "allow",
      },
      {
        selector: "typeParameter",
        format: ["PascalCase"],
        prefix: ["T"],
      },
      {
        selector: "typeLike",
        format: ["PascalCase"],
      },
      {
        selector: ["variable", "parameter"],
        types: ["boolean"],
        format: ["PascalCase"],
        prefix: ["is", "should", "has", "can", "did", "will", "must"],
      },
      {
        selector: "interface",
        format: ["PascalCase"],
        custom: {
          regex: "^I[A-Z]",
          match: false,
        },
      },
    ],
    "@typescript-eslint/no-array-constructor": 2,
    "@typescript-eslint/no-base-to-string": 2,
    "@typescript-eslint/no-confusing-non-null-assertion": 2,
    "@typescript-eslint/no-confusing-void-expression": 2,
    "@typescript-eslint/no-duplicate-enum-values": 0,
    "@typescript-eslint/no-dupe-class-members": 0,
    "@typescript-eslint/no-dynamic-delete": 2,
    "@typescript-eslint/no-extra-semi": 2,
    "@typescript-eslint/no-extraneous-class": 0,
    "@typescript-eslint/no-floating-promises": 2,
    "@typescript-eslint/no-for-in-array": 2,
    "@typescript-eslint/no-implied-eval": 2,
    "@typescript-eslint/no-inferrable-types": 2,
    "@typescript-eslint/no-invalid-this": 2,
    "@typescript-eslint/no-invalid-void-type": 2,
    "@typescript-eslint/no-loss-of-precision": 2,
    "@typescript-eslint/no-magic-numbers": 0,
    "@typescript-eslint/no-meaningless-void-operator": 2,
    "@typescript-eslint/no-misused-new": 2,
    "@typescript-eslint/no-misused-promises": 2,
    "@typescript-eslint/no-namespace": 2,
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": 2,
    "@typescript-eslint/no-non-null-asserted-optional-chain": 2,
    "@typescript-eslint/no-non-null-assertion": 2,
    "@typescript-eslint/no-redeclare": 2,
    "@typescript-eslint/no-require-imports": 2,
    "@typescript-eslint/no-restricted-imports": 2,
    "@typescript-eslint/no-shadow": [
      2,
      {
        ignoreTypeValueShadow: true,
        ignoreFunctionTypeParameterNameValueShadow: true,
      },
    ],
    "@typescript-eslint/no-this-alias": 0,
    "@typescript-eslint/no-throw-literal": 2,
    "@typescript-eslint/no-type-alias": 0,
    "@typescript-eslint/no-redundant-type-constituents": 2,
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": 2,
    "@typescript-eslint/no-unnecessary-condition": 2,
    "@typescript-eslint/no-unsafe-declaration-merging": 2,
    "@typescript-eslint/no-unnecessary-qualifier": 2,
    "@typescript-eslint/no-unnecessary-type-arguments": 2,
    "@typescript-eslint/no-unnecessary-type-assertion": 2,
    "@typescript-eslint/no-unnecessary-type-constraint": 2,
    "@typescript-eslint/no-unsafe-argument": 2,
    "@typescript-eslint/no-unsafe-assignment": 2,
    "@typescript-eslint/no-unsafe-call": 2,
    "@typescript-eslint/no-unsafe-member-access": 2,
    "@typescript-eslint/no-unsafe-return": 2,
    "@typescript-eslint/no-unused-expressions": 2,
    "@typescript-eslint/no-unused-vars": 2,
    "@typescript-eslint/no-use-before-define": 0,
    "@typescript-eslint/no-useless-constructor": 0,
    "@typescript-eslint/no-useless-empty-export": 2,
    "@typescript-eslint/no-var-requires": 2,
    "@typescript-eslint/non-nullable-type-assertion-style": 2,
    "@typescript-eslint/prefer-as-const": 2,
    "@typescript-eslint/prefer-enum-initializers": 2,
    "@typescript-eslint/prefer-for-of": 2,
    "@typescript-eslint/prefer-function-type": 2,
    "@typescript-eslint/prefer-includes": 2,
    "@typescript-eslint/prefer-literal-enum-member": 2,
    "@typescript-eslint/prefer-namespace-keyword": 2,
    "@typescript-eslint/prefer-nullish-coalescing": 2,
    "@typescript-eslint/prefer-optional-chain": 2,
    "@typescript-eslint/prefer-readonly": 0,
    "@typescript-eslint/prefer-readonly-parameter-types": 0,
    "@typescript-eslint/prefer-reduce-type-parameter": 2,
    "@typescript-eslint/prefer-regexp-exec": 2,
    "@typescript-eslint/prefer-return-this-type": 0,
    "@typescript-eslint/prefer-string-starts-ends-with": 2,
    "@typescript-eslint/prefer-ts-expect-error": 2,
    "@typescript-eslint/promise-function-async": 2,
    "@typescript-eslint/require-array-sort-compare": 2,
    "@typescript-eslint/require-await": 2,
    "@typescript-eslint/restrict-plus-operands": 2,
    "@typescript-eslint/restrict-template-expressions": 2,
    "@typescript-eslint/return-await": 2,
    "@typescript-eslint/sort-type-constituents": 2,
    "@typescript-eslint/strict-boolean-expressions": 2,
    "@typescript-eslint/switch-exhaustiveness-check": 0,
    "@typescript-eslint/triple-slash-reference": 2,
    "@typescript-eslint/typedef": 2,
    "@typescript-eslint/unbound-method": 0,
    "@typescript-eslint/unified-signatures": 2,
    "@typescript-eslint/object-curly-spacing": 0,
    ...deprecatedTypescriptEslintRules,
  },
};

export default typescriptEslintConfig;
